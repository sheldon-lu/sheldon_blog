<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Golang_问题</title>
      <link href="/sheldon_blog/passages/Golang-%E9%97%AE%E9%A2%98/"/>
      <url>/sheldon_blog/passages/Golang-%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>（持续更新）</p><h2 id="一、gorm遇到invalid-connection报错"><a href="#一、gorm遇到invalid-connection报错" class="headerlink" title="一、gorm遇到invalid connection报错"></a>一、gorm遇到invalid connection报错</h2><blockquote><p>(/data/dcops_workspace/src/x.x.x.x/xxxx/model/containerappid_info.go:76)<br>[2019-04-09 14:41:40]  invalid connection</p><p>现象：今天使用gorm时，总遇到invalid connection报错，导致服务<strong>过一段时间</strong>调一下接口就会重启</p><p>网上查了文档看了gorm的mysql连接池的参数：</p><p>dcosdb.DB().SetMaxIdleConns(10)  // SetMaxIdleConns设置idle connection pool的最大连接数。如果MaxOpenConns的值 &gt; 0，但是小于这里设置的MaxIdleConns，则MaxIdleConns将自动降到与MaxOpenConns的限制相同。如果 &lt;= 0, 则没有空闲连接会被保留。<strong><em>最大空闲连接数</em></strong></p><p>dcosdb.DB().SetMaxOpenConns(100)  //SetMaxOpenConns用于设置Database最大可以打开的连接数。如果 &lt;= 0, 则没有连接限制。且默认值为0（无限制）。<strong><em>数据库最大连接数</em></strong></p><p>dcosdb.DB().SetConnMaxLifetime(time.Second <em> 5)  // SetConnMaxLifetime用于设置连接可被重新使用的最大时间间隔。如果超时，则连接会在重新使用前被关闭。如果 d &lt;= 0, 则连接将被永久保留。**</em>连接最长存活期，超过这个时间连接将不再被复用***</p><p>原因是：程序在重复使用数据库tcp连接池中的某个连接时，该命中连接可能已被服务器过期丢弃，而客户端这边认为该连接为过期，还有效。此时会报错 invalid connection。随后将该连接重连接池中丢弃</p><p>原因参考：<a href="https://blog.csdn.net/dghpgyss/article/details/86480837" target="_blank" rel="noopener">https://blog.csdn.net/dghpgyss/article/details/86480837</a></p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 发现我把dcosdb.DB().SetConnMaxLifetime(time.Second * 5)这个参数设置成了dcosdb.DB().SetConnMaxLifetime(time.Hour)导致了每次连接丢弃，但是客户端不知道。服务端主动关闭了连接，因为服务端对连接的保持超时时间到了也关闭的，所以可以设置客户端连接超时时间小于服务端DB.SetConnMaxLifetime(time.Second)</span></span><br><span class="line"><span class="comment">// SetConnMaxLifetime sets the maximum amount of time a connection may be reused.</span></span><br><span class="line">dcosdb.DB().SetConnMaxLifetime(time.Second * <span class="number">5</span>)</span><br><span class="line"><span class="comment">// dcosdb.DB().SetConnMaxLifetime(time.Hour) 设置成了1小时</span></span><br></pre></td></tr></table></figure><h2 id="二、"><a href="#二、" class="headerlink" title="二、"></a>二、</h2>]]></content>
      
      
      
        <tags>
            
            <tag> Golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker的一些东西</title>
      <link href="/sheldon_blog/passages/Docker%E7%9A%84%E4%B8%80%E4%BA%9B%E4%B8%9C%E8%A5%BF/"/>
      <url>/sheldon_blog/passages/Docker%E7%9A%84%E4%B8%80%E4%BA%9B%E4%B8%9C%E8%A5%BF/</url>
      
        <content type="html"><![CDATA[<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><h3 id="指北"><a href="#指北" class="headerlink" title="指北"></a>指北</h3>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记一点Haproxy参数的文档</title>
      <link href="/sheldon_blog/passages/%E8%AE%B0%E4%B8%80%E7%82%B9Haproxy%E5%8F%82%E6%95%B0%E7%9A%84%E6%96%87%E6%A1%A3/"/>
      <url>/sheldon_blog/passages/%E8%AE%B0%E4%B8%80%E7%82%B9Haproxy%E5%8F%82%E6%95%B0%E7%9A%84%E6%96%87%E6%A1%A3/</url>
      
        <content type="html"><![CDATA[<p>Haproxy的一些配置参数，/etc/haproxy/haproxy.cfg</p><blockquote><p>主要是配置项的超时参数，如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> <span class="comment"># 反映连接haproxy集群报错，查看应用服务器进程大量的端口连接处于colse_wait状态。</span></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> <span class="comment"># 这个haproxy的redis集群类似配置已经好几组了，配置都相同问啥别的都好好的这个却有问题。</span></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> <span class="comment"># 自己尝试使用redis-cli连接（haproxy做的redis分片集群），确实能够正常连接操作，但是连接状态马上就会变成close_wait状态，重新执行命令这个close_wait状态会恢复ESTABLISHED，但是细心看端口号已经变化，也就是redis-cli发生了重新连接。于是问题清晰了：用户客户端工具建立链接后，没有自动重连来保持连接，导致超时，服务器主动断开连接，客户端再次链接的时候socket已经损坏不可用了，导致报错</span></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> <span class="comment"># 解决办法：调整haproxy的超时参数：</span></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> timeout connect 5s</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> timeout queue   5s</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> timeout client 30s</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> timeout server 30s</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> timeout client-fin 30s</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> timeout server-fin 30s</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> timeout tunnel  1h</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> <span class="comment"># 参数解释：</span></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> timeout connect      连接尝试成功连接到server的超时时间</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> timeout queue        在队列等待连接槽释放的超时时间</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> timeout server       server端非活动状态超时时间</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> timeout client       客户端非活动状态超时时间</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> timeout server-fin   半关闭状态连接，server端非活动超时时间</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> timeout client-fin   半关闭状态连接，client端非活动超时时间</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> timeout tunnel       客户端和服务器端通道非活动超时时间</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"></span></span><br></pre></td></tr></table></figure></blockquote><blockquote></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> Haproxy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安静写点东西</title>
      <link href="/sheldon_blog/passages/%E5%AE%89%E9%9D%99%E5%86%99%E7%82%B9%E4%B8%9C%E8%A5%BF/"/>
      <url>/sheldon_blog/passages/%E5%AE%89%E9%9D%99%E5%86%99%E7%82%B9%E4%B8%9C%E8%A5%BF/</url>
      
        <content type="html"><![CDATA[<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Come on ٩(๑.◡.๑)۶ ，Please ecter Password (*ﾉ▽ﾉ)." />    <label for="pass">Come on ٩(๑.◡.๑)۶ ，Please ecter Password (*ﾉ▽ﾉ).</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">U2FsdGVkX1+7PWe/bR+MeXTv9EEyN+Fr84sTa2Hd1ovM1ALCbkA0BdkZxXQCdNxMEFwEsFKptB0wmd74Yv7S22z8NCCj3uMa3aNLQya/zlF5aBI6K/CzFw1vfb6wro599N4yKbwglKtPEvWzXs6GQVIANvdtNgLrfobHWZqICsGPA9k8EYiaUV/EgbZjf1c5VLU6sBQBRioB1ROLp22YIE20i3dPMABatVmTeUkKSLJ9DZmw2eaiyaf38pLGN2XWXJc7H/rPqfgDq/YZSM6uzWZlrQsO0T/m123xtGSI0PBBGft95BYfEwU9CK6UhgDs0mbZ1A/4OVzv7ucciEH5OVYpzmmBt8FUoOakCRCE/Dsd/rG7/IG6lQx+IrkirWh8/inHnMjIR1C/ZOdum96vCHIz6Evnx0Bo1awEISYNdCs0ocyV+Os+6jubPSEV1t0Sq6kxNcT970x9cCncPePpNqKZV/MEKIYwfqksBCQogBU8gSv2yKJCGOR9bLvyz19ymudhz2wTmKfHRnsXP8mr0k0Ro1WOV1gSgh5qLUPPeMuZIGr5OUrpxTasHf4quqklJk3HezQxYHP2vKBOx68wFHaO8q1ICN8nq7Krk9I3H5DNuE+2fng919mjQrAaEbhBsdyUGDTDd3GTzE03nAe4E4aScfc08ygHdmNokEjTTNwDjBCNJtYx1WK1XSWFsYcuW2as/YE6u5DGHPVVcZrnycCSpPIOL5O/Pm7aadgjeffg5oMpn1kwpiprMN7CI1AWn4PvRK1XTYBB+ICf7xM9vQZJKrDrV6uFa/GGn4NnrJw1faXi1oL4HoY5sUxu8YsokYIgnuEGT6Nb5Qcl65hWS5S7G7iEOX+/TxIEHYrmU+daynrEx10u8L8C9xRj2N7B+voK6YytrDw/IFuXEkMa9NuX7MsOHNgFwMutJLR3AeWiUPdAeTqZtPGVUQI+fl6HI7TZp/dDRD9c20ntB3LZwi/V53AwJyTOH2tZ0Bf5Cx6R9XbZ3iaR1x70SnNPxIduJqe3lc0I9p8BbXG59XE6yx7vfSlUwlv8M/+Qa3pUe7Pb7RSF9SEbvOn0cbi/07eD8pHgjBkYdkXGajT3tTzXCJGn64u2PKnHJNjQmTFRZ+MVSqsydtRQ3UmGm9MGCXJ6dNpwusgU8+B/M2YCUKaGah76bsouXrXD7QlcPCQ2y4bnEi9Ic+JfHRAIpPiPBFNNlf7cEx17zaSdhlG1SxtXmrXaRbGOIPrqwd+hV0JaECIqK2auTUgnAT176Fs8hpsGnG4T+5xurICMEq9CGH75aZayWFVQjVTmwQlfq5vb/StYOU8FOFiiEfFbb9d+NkVB8Au03pzJOdyI0wkUf4HW3NcL5bfxayUx5ehaRKQkRY8qvxNOj5mEyJwZtZwbqidAbY2aexbb2Vp9+EBO8O5wBdQM52suMXi3ohWS9TZIaYyQZqXzm+DQbhdr2YQbmuqg2FRF8VOZHURVYN56RI1UtNswYpS7LCNt2bsI0xUEaqjFzLo39ZagS+SXYPjQsRPeJqmO8ez3X7R1Sr23IX8zM9Fb/M8mvN8wvpLk7ltdl3k11Z11ucEuPiYguFLsOTllIybFvqoUpexf4sF2aQlvQXm82V70ASr5M0gNl+cshy4vwSgUO1+nnmLhLWiPernPiA0v5ZdfSXwS+dabB4mhAj13vyh6EqX0Pajs4YxApqtzmlWY9Z3KuM+xJRmIGeSviamO6ew8p+An6BCPrGrPerqJPaY8+qetZmGSkDbGAoG7z2E/xlAa2sGqcRkQDDk0W8fysvBgA/C96biJ7wbUp+EdmOLu9dUj+1IY7umwTbQd7H4V7q9ZxuR1MmcLvl8CieGqCitKMxJcqKVPKUPuqUSbKnj1dYFYvlWf9nEzBJ02rjeaTtcnFtTyfHr/AXq5Hls8QDiTQaE42E9/tovLQSV2fD8F/j6cbdHk2WNFQn+B7oexs8/uNjlMZeSl6f4VOOH+sdKmd7gcLP2xsqEbuaVLw4r5oJ6NvmjirVIPNM7jaLZUsLI4MTL3U6mgH1IwS/vcHXdTIbRohgrm7Igh4dl39TbNn4GojfOL0qYli8qU3V0bn1/8Hitodcy1mEIrhiz/Je0NV7ax+gP1T/lloE62Qnx+XWC6IAwYofgH69AlnvbmIU8LL9jo0M932aOoJrE45egBZTrcktS1Xbe5pLDPr8x7axaFEIK6jliKg7Sa5w3nv/YdpVGROsq0tqZ9139QY0EGk9ZWQqKnY/HYtu83Z1YwKAUFcDQ8ogAvwzyMPxSJGHR/DA74r3fblYri/M2fJuozg5fPAh0kNpEZlQW9ode/3pWsSsHpDl+LpJBPrZ3l9Lwa3tqsoU2ty/x7tOsnrMsfOPRxwpy53EsMufm7MHisBduWvi1GdexqphazOVSCQkdY/eBVm4PZ2A2tPu23UEqzeOiVZiwe9dK/NFJMSLQ8UOzSdOXWAgN6aZ7WKRomNXorHh1I6Krc9nup1TmYUkUCgSGF/ZRT48qpPz0zlCLtwbiXGjNhurm8p/25Fo8yybLlk4BuD9g7/UCvRp8sBGpRoK2QVaR+EuAW9ptuKQ6OGlUGPsSlNUh1DKHxxjSbOuEB8BDj1uraryzbWQ8S1MF4SBAiijsxzfPD74vA62LDrsAU3D3pWNTRbVpMJNHcyYaHq4oZXbTgp8ArBPWgXfyPkHsQgch5FAFzFp4qQpVLzRoJXSv5iinbMGjRDjJygCRseOzF6nc39rDZWKYZPSaK/mji9CHIqtZpsWrEtyZBR+BfiYtoxuTw9IHN+xQ4h1skrwD8ixFIMU5j4+Nrd+MAE//5LyXpVRv0jmjRY9Xm9V7x1KXHd31xyJ8xM4mSUSN2GL48v5gRWgsITmIndb0DLCQN9ON20v6GLeVstM/rpqhgdpBw+JawUgMq4b3Us7yoFHrJaTkaswJ1baN+M5Hvcv3Xjc0ZiLzLJoT9HICZ0AdUEzvNGHf9Lt8uIiAk/Fpzi9O7HHdggjaA6P1Ao5B1RQsybqazR4uFavJektx/06ZAOrqkp7a9goakppATZ87jMwnXV8qlp3HBI6voEvToD2JzGCv1HVhpz0bGDiQsoaq/h35N0A7jdh4=</div><script src="/sheldon_blog/lib/crypto-js.js"></script><script src="/sheldon_blog/lib/blog-encrypt.js"></script><link href="/sheldon_blog/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
        <tags>
            
            <tag> 生活需要一点方式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kubernetes_填坑</title>
      <link href="/sheldon_blog/passages/Kubernetes-%E5%A1%AB%E5%9D%91/"/>
      <url>/sheldon_blog/passages/Kubernetes-%E5%A1%AB%E5%9D%91/</url>
      
        <content type="html"><![CDATA[<h2 id="更新19-4-5"><a href="#更新19-4-5" class="headerlink" title="更新19.4.5"></a>更新19.4.5</h2><h3 id="一、etcd-单点问题"><a href="#一、etcd-单点问题" class="headerlink" title="一、etcd 单点问题"></a>一、etcd 单点问题<a id="more"></a></h3><p>默认<code>kubeadm</code>创建的集群会在内部启动一个单点的 etcd，当然大部分情况下 etcd 还是很稳定的，<strong>但是一但 etcd 由于某种原因挂掉，这个问题会非常严重，会导致整个集群不可用</strong>。具体原因是 etcd 存储着 kubernetes 各种元数据信息；包括 <code>kubectl get pod</code>等等基础命令实际上全部是调用 RESTful API 从 etcd 中获取的信息；<strong>所以一但 etcd 挂掉以后，基本等同于<code>kubectl</code>命令不可用，集群各节点也会因无法从 etcd 获取数据而出现无法调度，最终挂掉</strong>。</p><p><strong>解决办法：是在使用<code>kubeadm</code>创建集群时使用 –external-etcd-endpoints 参数指定外部 etcd 集群，此时<code>kubeadm</code> 将不会在内部创建 etcd，转而使用外部我们指定的 etcd 集群，如果外部 etcd 集群配置了 SSL 加密，那么还需要配合 –external-etcd-cafile、–external-etcd-certfile、–external-etcd-keyfile 三个参数指定 etcd 的 CA证书、CA签发的使用证书和私钥文件，命令如下</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 非 SSL</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> kubeadm init --external-etcd-endpoints http://x.x.x.1:2379</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> etcd SSL</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> kubeadm init --external-etcd-endpoints https://x.x.x.1:2379 --external-etcd-cafile /path/to/ca --external-etcd-certfile /path/to/cert --external-etcd-keyfile /path/to/privatekey</span></span><br></pre></td></tr></table></figure><h3 id="二、etcd-不可与-master-同在"><a href="#二、etcd-不可与-master-同在" class="headerlink" title="二、etcd 不可与 master 同在"></a>二、etcd 不可与 master 同在</h3><p>‘愿上帝与你同在’……这个坑是由于<code>kubeadm</code>的 check 机制的 bug 造成的，目前还没有修复；表现为 <strong>当 etcd 与 master 在同一节点时，kubeadm init 会失败，同时报错信息提示’已经存在了 /var/lib/etcd 目录，或者 2379 端口被占用’</strong>；因为默认<code>kubeadm</code>会创建 etcd，而默认的 etcd 会占用这个目录和 2379 端口，<strong>即使你加了<code>--external-etcd-endpoints</code>参数，<code>kubeadm</code>仍然会检测这两项条件是否满足，不满足则禁止 init 操作</strong></p><p><strong>解决办法：就是要么外部的 etcd 更换数据目录(/var/lib/etcd)和端口，要么干脆不要和 master 放在同一主机即可</strong></p><h3 id="三、巨大的日志"><a href="#三、巨大的日志" class="headerlink" title="三、巨大的日志"></a>三、巨大的日志</h3><p>熟悉的小伙伴应该清楚，基本上每个 kubernetes 组件都会有个通用的参数 <code>--v</code>；这个参数用于控制 kubernetes 各个组件的日志级别，在早期(alpha)的 kubeadm 版本中，如果不进行调整，默认创建集群所有组件日志级别全部为 <code>--v=4</code> 即最高级别输出，这会导致在业务量大的时候磁盘空间以 <strong>‘我去尼玛’</strong> 的速度增长，尤其是 <code>kube-proxy</code> 组件的容器，会疯狂吃掉你的磁盘空间，然后剩下懵逼的你不知为何。在后续的版本中(beta)发现日志级别已经降到了 <code>--v=2</code>，不过对于完全不怎么看日志的我来说还是无卵用……</p><p><strong>解决办法有两种方案:</strong></p><p><strong>1、如果已经 –v=4 跑起来了(检查方法就是随便 describe 一个 kube-proxy 的容器，看下 command 字段就能看到)，并且无法停止重建集群，那么最简单的办法就是使用<code>kubectl edit ds xxx</code>方式编译一下相关 ds 文件等，然后手动杀掉相关 pod，让 kubernetes 自动重建即可，如果命令行用着不爽也可以通过 dashboard 更改</strong></p><p><strong>2、如果还没开始搭建，或者可以停掉重建，那么只需在<code>kubeadm init</code>之前<code>export KUBE_COMPONENT_LOGLEVEL=&#39;--v=0&#39;</code>即可</strong></p><h3 id="四、新节点加入-dns-要你命"><a href="#四、新节点加入-dns-要你命" class="headerlink" title="四、新节点加入 dns 要你命"></a>四、新节点加入 dns 要你命</h3><p>当 kubeadm 创建好集群以后，如果有需要增加新节点，那么在 <code>kubeadm join</code> 之后务必检查 <code>kube-dns</code> 组件，dns 在某些(weave 启动不完整或不正常)情况下，会由于新节点加入而挂掉，此时整个集群 dns 失效，<strong>所以最好 join 完观察一会 dns 状态，如果发现不正常马上杀掉 dns pod，让 kubernetes 自动重建；如果情况允许最好全部 join 完成后直接干掉 dns 让 kubernetes 重建一下</strong></p><h3 id="五、单点的-dns-浪起来让你怕（更新-19-4-5）"><a href="#五、单点的-dns-浪起来让你怕（更新-19-4-5）" class="headerlink" title="五、单点的 dns 浪起来让你怕（更新-19.4.5）"></a>五、单点的 dns 浪起来让你怕（更新-19.4.5）</h3><p>kubeadm 创建的 dns 默认也是单点的，而 dns 至关重要，只要一挂瞬间整个集群全部 <code>game over</code>；<strong>不过暂时还是没有发现能在 init 时候创建多个 dns 的方法；不过在集群创建后可以通过<code>kubectl edit deploy kube-dns</code>的方式修改其副本数量，让其创建多个副本即可</strong>，<strong><em>目前新版本kubernetes所使用的dns已经不是单pod三container，而是启动两个pod的coredns，解决单点问题</em></strong></p><h3 id="六、coredns一直处于ContainerCreating状态"><a href="#六、coredns一直处于ContainerCreating状态" class="headerlink" title="六、coredns一直处于ContainerCreating状态"></a>六、coredns一直处于ContainerCreating状态</h3><blockquote><p>Node加入集群中后一直处于NotReady状态，查看kube-system的状态，发现coredns一直处于ContainerCreating状态，flannel启动正常</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> kubectl get nodes</span></span><br><span class="line">NAME              STATUS     ROLES    AGE     VERSION</span><br><span class="line">master1.rsq.com   NotReady   master   16h     v1.13.0</span><br><span class="line">node01.rsq.com    NotReady   &lt;none&gt;   16h     v1.13.0</span><br><span class="line">node02.rsq.com    NotReady   &lt;none&gt;   8m39s   v1.13.0</span><br></pre></td></tr></table></figure><p>查看kubelet服务状态，看最后几行的报错</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> systemctl status kubelet</span></span><br><span class="line">● kubelet.service - kubelet: The Kubernetes Node Agent</span><br><span class="line">   Loaded: loaded (/etc/systemd/system/kubelet.service; enabled; vendor preset: disabled)</span><br><span class="line">  Drop-In: /etc/systemd/system/kubelet.service.d</span><br><span class="line">           └─10-kubeadm.conf</span><br><span class="line">   Active: active (running) since Wed 2018-12-12 09:24:44 CST; 6min ago</span><br><span class="line">     Docs: https://kubernetes.io/docs/</span><br><span class="line"> Main PID: 123631 (kubelet)</span><br><span class="line">   Memory: 35.2M</span><br><span class="line">   CGroup: /system.slice/kubelet.service</span><br><span class="line">           └─123631 /usr/bin/kubelet --bootstrap-kubeconfig=/etc/kubernetes/bootstrap-kubelet.conf --kubeconfig=/etc/kubernetes/kubelet.conf --config=/var/lib/kubelet/config.yaml --cgrou...</span><br><span class="line"></span><br><span class="line">Dec 12 09:30:57 master1.rsq.com kubelet[123631]: E1212 09:30:57.187292  123631 pod_workers.go:190] Error syncing pod cea84a11-fd24-11e8-a282-000c291e37c2 ("coredns-86c58d9df4-fzs9l_kube-...</span><br><span class="line">Dec 12 09:30:57 master1.rsq.com kubelet[123631]: E1212 09:30:57.187480  123631 pod_workers.go:190] Error syncing pod cea7ebef-fd24-11e8-a282-000c291e37c2 ("coredns-86c58d9df4-hrwvk_kube-...</span><br><span class="line">Dec 12 09:30:59 master1.rsq.com kubelet[123631]: E1212 09:30:59.187419  123631 pod_workers.go:190] Error syncing pod cea84a11-fd24-11e8-a282-000c291e37c2 ("coredns-86c58d9df4-fzs9l_kube-...</span><br><span class="line">Dec 12 09:30:59 master1.rsq.com kubelet[123631]: E1212 09:30:59.187607  123631 pod_workers.go:190] Error syncing pod cea7ebef-fd24-11e8-a282-000c291e37c2 ("coredns-86c58d9df4-hrwvk_kube-...</span><br><span class="line">Dec 12 09:31:00 master1.rsq.com kubelet[123631]: W1212 09:31:00.454147  123631 cni.go:203] Unable to update cni config: No networks found in /etc/cni/net.d</span><br><span class="line">Dec 12 09:31:00 master1.rsq.com kubelet[123631]: E1212 09:31:00.454242  123631 kubelet.go:2192] Container runtime network not ready: NetworkReady=false reason:NetworkPluginNot...initialized</span><br><span class="line">Dec 12 09:31:01 master1.rsq.com kubelet[123631]: E1212 09:31:01.188877  123631 pod_workers.go:190] Error syncing pod cea7ebef-fd24-11e8-a282-000c291e37c2 ("coredns-86c58d9df4-hrwvk_kube-...</span><br><span class="line">Dec 12 09:31:01 master1.rsq.com kubelet[123631]: E1212 09:31:01.189259  123631 pod_workers.go:190] Error syncing pod cea84a11-fd24-11e8-a282-000c291e37c2 ("coredns-86c58d9df4-fzs9l_kube-...</span><br><span class="line">Dec 12 09:31:03 master1.rsq.com kubelet[123631]: E1212 09:31:03.187200  123631 pod_workers.go:190] Error syncing pod cea84a11-fd24-11e8-a282-000c291e37c2 ("coredns-86c58d9df4-fzs9l_kube-...</span><br><span class="line">Dec 12 09:31:03 master1.rsq.com kubelet[123631]: E1212 09:31:03.187730  123631 pod_workers.go:190] Error syncing pod cea7ebef-fd24-11e8-a282-000c291e37c2 ("coredns-86c58d9df4-hrwvk_kube-...</span><br><span class="line">Hint: Some lines were ellipsized, use -l to show in full.</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 附加PS</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 报错10.244.0.1 网络已存在（更新）</span></span><br></pre></td></tr></table></figure><p>产生问题原因：</p><p>一直报网络NotReady，我就感觉flannel组件出了问题， 最后网上搜了一些资料解决<br>参考博客：<a href="http://www.cnblogs.com/effortsing/p/10014611.html" target="_blank" rel="noopener">coreDNS一直处于创建中解决</a><br>解决办法：所有节点执行（我只在master节点先执行就解决问题了）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> rm -rf /var/lib/cni/flannel/* &amp;&amp; rm -rf /var/lib/cni/networks/cbr0/* &amp;&amp; ip link delete cni0</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> rm -rf /var/lib/cni/networks/cni0/*</span></span><br></pre></td></tr></table></figure><p>删除flannel组件，重新下载</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> docker rmi quay.io/coreos/flannel:v0.10.0-amd64</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml</span></span><br></pre></td></tr></table></figure><p>查看节点状态已经处于Ready状态</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> kubectl get nodes</span></span><br><span class="line">NAME              STATUS   ROLES    AGE   VERSION</span><br><span class="line">master1.rsq.com   Ready    master   16h   v1.13.0</span><br><span class="line">node01.rsq.com    Ready    &lt;none&gt;   16h   v1.13.0</span><br><span class="line">node02.rsq.com    Ready    &lt;none&gt;   39m   v1.13.0</span><br></pre></td></tr></table></figure><h3 id="七、kubeadm-join报错"><a href="#七、kubeadm-join报错" class="headerlink" title="七、kubeadm join报错"></a>七、kubeadm join报错</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">在部署服务过程中，初始化之后重启了master节点，然后node节点在join进群的时候报错，提示证书是否过期等问题，报错信息如下：</span><br><span class="line"><span class="meta">#</span><span class="bash"> kubeadm join 10.0.0.100:6443 --token qxl5b3.5b78nwu3gm1r4u6o --discovery-token-ca-cert-hash sha256:3e20fa8054cbc9000cf3d3586a05a01d8af5721b577856e93c7e243877393d21 --ignore-preflight-errors=Swap</span></span><br><span class="line"></span><br><span class="line">[preflight] Running pre-flight checks</span><br><span class="line">[WARNING Swap]: running with swap on is not supported. Please disable swap</span><br><span class="line">[WARNING SystemVerification]: this Docker version is not on the list of validated versions: 18.09.0. Latest validated version: 18.06</span><br><span class="line">[discovery] Trying to connect to API Server "10.0.0.100:6443"</span><br><span class="line">[discovery] Created cluster-info discovery client, requesting info from "https://10.0.0.100:6443"</span><br><span class="line">[discovery] Failed to request cluster info, will try again: [Get https://10.0.0.100:6443/api/v1/namespaces/kube-public/configmaps/cluster-info: dial tcp 10.0.0.100:6443: connect: connection refused]</span><br><span class="line">[discovery] Failed to request cluster info, will try again: [Get https://10.0.0.100:6443/api/v1/namespaces/kube-public/configmaps/cluster-info: dial tcp 10.0.0.100:6443: connect: connection refused]</span><br></pre></td></tr></table></figure><blockquote><p>产生原因：有可能是时间不同步造成的，在初始化后重启master，重启后会报错</p></blockquote><p>找了好多资料，没有找到可行的，最后kubeadm reset完美解决<br>参考博文： <a href="https://www.cnblogs.com/justmine/p/8886675.html" target="_blank" rel="noopener">k8s踩坑记 - kubeadm join 之 token 失效</a><br>reset之后重新初始化</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> kubeadm reset</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> kubeadm init --kubernetes-version=v1.13.0 --pod-network-cidr=10.244.0.0/16 --service-cidr=10.96.0.0/12 --token-ttl=0 --ignore-preflight-errors=Swap</span></span><br></pre></td></tr></table></figure><p>创建所需文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> mkdir -p <span class="variable">$HOME</span>/.kube</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> cp -i /etc/kubernetes/admin.conf <span class="variable">$HOME</span>/.kube/config</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> chown $(id -u):$(id -g) <span class="variable">$HOME</span>/.kube/config</span></span><br></pre></td></tr></table></figure><p>查看节点</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> kubectl get nodes</span></span><br><span class="line">NAME              STATUS     ROLES    AGE     VERSION</span><br><span class="line">master1.rsq.com   NotReady   master   2m49s   v1.13.0</span><br></pre></td></tr></table></figure><h3 id="八、Etcd二进制安装目录也会报错哦"><a href="#八、Etcd二进制安装目录也会报错哦" class="headerlink" title="八、Etcd二进制安装目录也会报错哦"></a>八、Etcd二进制安装目录也会报错哦</h3><p><strong>etcd服务启动后报错etcd cluster ID mismatch：</strong>检查service配置cluster选项有无问题，若无问题，则可能是此前的etcd bootstrap加速启动缓存残留导致，坑爹的是<code>rm -rf /var/lib/etcd/*</code>删除完了之后还是报错，必须<code>rm -rf /var/lib/etcd/</code>才能彻底清除，删除完成后记得再创建该路径mkdir /var/lib/etcd，否则会有类似报错：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">etcd.service: Failed at step CHDIR spawning /usr/local/bin/etcd: No such file or directory</span><br></pre></td></tr></table></figure><h3 id="九、二进制安装后重建相关组件会出现secrets报错"><a href="#九、二进制安装后重建相关组件会出现secrets报错" class="headerlink" title="九、二进制安装后重建相关组件会出现secrets报错"></a>九、二进制安装后重建相关组件会出现secrets报错</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">May 27 10:34:45 kube-node3 journal: E0527 02:34:45.767392      1 config.go:322] Expected to load root CA config from /var/run/secrets/kubernetes.io/serviceaccount/ca.crt, but got err: open /var/run/secrets/kubernetes.io/serviceaccount/ca.crt: no such file or directory </span><br><span class="line"></span><br><span class="line">May 27 10:34:45 kube-node3 journal: E0527 02:34:45.767392      1 config.go:322] Expected to load root CA config from /var/run/secrets/kubernetes.io/serviceaccount/ca.crt, but got err: open /var/run/secrets/kubernetes.io/serviceaccount/ca.crt: no such file or directory</span><br></pre></td></tr></table></figure><blockquote><p>分析：产生这个错误是因为Kubernetes默认创建的secrets资源不包含用于访问kube-apiserver的根证书 </p><p>需要给apiserver设置安全证书，然后删除默认secrets，系统会自动产生新的secrets </p><p>secrets一般集群安装时默认自动创建 </p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> kubectl delete secret secretname -n Xxx</span></span><br></pre></td></tr></table></figure><h3 id="十、kubeadm生成集群，加入节点时发现忘记了join-token-怎么办？"><a href="#十、kubeadm生成集群，加入节点时发现忘记了join-token-怎么办？" class="headerlink" title="十、kubeadm生成集群，加入节点时发现忘记了join token 怎么办？"></a>十、kubeadm生成集群，加入节点时发现忘记了join token 怎么办？</h3><blockquote><p>1.生成一条永久有效的token </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> <span class="comment"># kubeadm token create --ttl 0 </span></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> o4avtg.65ji6b778nyacw68 </span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> </span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> <span class="comment"># kubeadm token list </span></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> TOKEN                     TTL         EXPIRES                     USAGES                   DESCRIPTION   EXTRA GROUPS </span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> dxnj79.rnj561a137ri76ym   &lt;invalid&gt;   2018-11-\<span class="comment">#02T14:06:43+08:00   authentication,signing   &lt;none&gt;        system:bootstrappers:kubeadm:default-node-token </span></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> o4avtg.65ji6b778nyacw68   &lt;forever&gt;   &lt;never&gt;                     authentication,signing   &lt;none&gt;        system:bootstrappers:kubeadm:default-node-token </span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"></span></span><br></pre></td></tr></table></figure></blockquote><blockquote><p>2.获取ca证书sha256编码hash值 </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> <span class="comment"># openssl x509 -pubkey -in /etc/kubernetes/pki/ca.crt | openssl rsa -pubin -outform der 2&gt;/dev/null | openssl dgst -sha256 -hex | sed 's/^.* //' </span></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> </span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> 2cc3029123db737f234186636330e87b5510c173c669f513a9c0e0da395515b0 </span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"></span></span><br></pre></td></tr></table></figure></blockquote><blockquote><p>3.node节点加入 </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> <span class="comment"># kubeadm join x.x.x.x:6443 --token o4avtg.65ji6b778nyacw68 --discovery-token-ca-cert-hash sha256:2cc3029123db737f234186636330e87b5510c173c669f513a9c0e0da395515b0 </span></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"></span></span><br></pre></td></tr></table></figure></blockquote><blockquote></blockquote>]]></content>
      
      
      <categories>
          
          <category> Kubernetes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kubernetes </tag>
            
            <tag> kubernetes_problem </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kubernetes安装—kubeadm_1.13.5</title>
      <link href="/sheldon_blog/passages/Kubernetes%E5%AE%89%E8%A3%85%E2%80%94kubeadm-1-13-5/"/>
      <url>/sheldon_blog/passages/Kubernetes%E5%AE%89%E8%A3%85%E2%80%94kubeadm-1-13-5/</url>
      
        <content type="html"><![CDATA[<h2 id="环境描述"><a href="#环境描述" class="headerlink" title="环境描述"></a>环境描述</h2><blockquote><p>kubernetes version：1.13.5</p><p>docker version：18.6.3</p><p>Redhat：7.6</p><p>linux 内核：4.2.0</p></blockquote><a id="more"></a><table><thead><tr><th style="text-align:left">x.x.x.1</th><th style="text-align:center">master-1</th><th>kube-apiserver、kube-controller-manager、kube-scheduler、etcd、keepalive、docker</th></tr></thead><tbody><tr><td style="text-align:left"><strong>x.x.x.2</strong></td><td style="text-align:center"><strong>master-2</strong></td><td><strong>kube-apiserver、kube-controller-manager、kube-scheduler、etcd、keepalive、docker</strong></td></tr><tr><td style="text-align:left"><strong>x.x.x.3</strong></td><td style="text-align:center"><strong>master-3</strong></td><td><strong>kube-apiserver、kube-controller-manager、kube-scheduler、etcd、keepalive、docker</strong></td></tr><tr><td style="text-align:left"><strong>x.x.x.4</strong></td><td style="text-align:center"><strong>vip</strong></td><td></td></tr><tr><td style="text-align:left"><strong>x.x.x.5</strong></td><td style="text-align:center"><strong>node-1</strong></td><td><strong>kubelet、docker</strong></td></tr><tr><td style="text-align:left"><strong>x.x.x.6</strong></td><td style="text-align:center"><strong>node-2</strong></td><td><strong>kubelet、docker</strong></td></tr></tbody></table><p>因为担心kubeadm起来的etcd不稳定，这里用到的etcd对于kubernetes来说作为外部etcd集群。即使用二进制安装etcd集群，其余组件用kubeadm来完成安装。</p><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><h3 id="1、准备工作"><a href="#1、准备工作" class="headerlink" title="1、准备工作"></a>1、准备工作</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">echo "1" &gt; /proc/sys/net/bridge/bridge-nf-call-iptables</span><br><span class="line"><span class="meta">#</span><span class="bash"> 停防火墙</span></span><br><span class="line">systemctl stop firewalld</span><br><span class="line">systemctl disable firewalld</span><br><span class="line">systemctl disable firewalld</span><br><span class="line"><span class="meta">#</span><span class="bash"> 关闭Swap</span></span><br><span class="line">swapoff -a</span><br><span class="line">sed 's/.*swap.*/#&amp;/' /etc/fstab</span><br><span class="line"><span class="meta">#</span><span class="bash"> 关闭防火墙</span></span><br><span class="line">systemctl disable firewalld &amp;&amp; systemctl stop firewalld &amp;&amp; systemctl status firewalld</span><br><span class="line"><span class="meta">#</span><span class="bash"> 关闭Selinux</span></span><br><span class="line">setenforce  0</span><br><span class="line">sed -i "s/^SELINUX=enforcing/SELINUX=disabled/g" /etc/sysconfig/selinux</span><br><span class="line">sed -i "s/^SELINUX=enforcing/SELINUX=disabled/g" /etc/selinux/config</span><br><span class="line">sed -i "s/^SELINUX=permissive/SELINUX=disabled/g" /etc/sysconfig/selinux</span><br><span class="line">sed -i "s/^SELINUX=permissive/SELINUX=disabled/g" /etc/selinux/config</span><br></pre></td></tr></table></figure><h3 id="2、docker安装"><a href="#2、docker安装" class="headerlink" title="2、docker安装"></a>2、docker安装</h3><h4 id="1、下载设置源"><a href="#1、下载设置源" class="headerlink" title="1、下载设置源"></a>1、下载设置源</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install -y yum-utils \</span><br><span class="line">  device-mapper-persistent-data \</span><br><span class="line">  lvm2</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum-config-manager \</span><br><span class="line">--add-repo \</span><br><span class="line">https://download.daocloud.io/docker/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure><h4 id="2、安装docker"><a href="#2、安装docker" class="headerlink" title="2、安装docker"></a>2、安装docker</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum list docker-ce --showduplicates | sort -r  # 列出docker-ce的版本list</span><br><span class="line">yum install docker-ce-&lt;版本号&gt; -y # -y 安装docker需要的依赖，其中有个container-selinux的也可以单独下载</span><br><span class="line"><span class="meta">#</span><span class="bash"> rpm -ivh container-selinux-2.33-1.git86f33cd.el7.noarch.rpm</span></span><br></pre></td></tr></table></figure><h4 id="3、启动docker"><a href="#3、启动docker" class="headerlink" title="3、启动docker"></a>3、启动docker</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl start docker</span><br><span class="line">docker version # 验证docker安装是否完成并启动成功</span><br></pre></td></tr></table></figure><h3 id="3、kubeadm-kubelet-kubectl安装"><a href="#3、kubeadm-kubelet-kubectl安装" class="headerlink" title="3、kubeadm/kubelet/kubectl安装"></a>3、kubeadm/kubelet/kubectl安装</h3><blockquote><p>各节点安装</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">cat &lt;&lt;EOF &gt; /etc/yum.repos.d/kubernetes.repo</span><br><span class="line">[kubernetes]</span><br><span class="line">name=Kubernetes</span><br><span class="line">baseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64/</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=0</span><br><span class="line">repo_gpgcheck=0</span><br><span class="line">gpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">yum install -y kubelet-1.13.5 kubeadm-1.13.5 kubectl-1.13.5 --disableexcludes=kubernetes  #禁用除kubernetes之外的仓库,要用 -y 参数，会自动安装kube-cni等插件</span><br><span class="line"></span><br><span class="line">systemctl start kubelet</span><br><span class="line">systemctl enable kubelet # kubeadm 要求kubelet保持开机自启状态</span><br></pre></td></tr></table></figure><h3 id="4、keepalive安装"><a href="#4、keepalive安装" class="headerlink" title="4、keepalive安装"></a>4、keepalive安装</h3><blockquote><p>master节点安装：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">yum install -y keepalived</span><br><span class="line">systemctl start keepalived</span><br><span class="line"></span><br><span class="line">vim /etc/keepalived/keepalived.conf</span><br><span class="line">global_defs &#123;</span><br><span class="line">   router_id LVS_k8s</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_script CheckK8sMaster &#123;</span><br><span class="line">    script &quot;curl -k https://10.70.49.130:6443&quot;</span><br><span class="line">    interval 3</span><br><span class="line">    timeout 9</span><br><span class="line">    fall 2</span><br><span class="line">    rise 2</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">    state MASTER</span><br><span class="line">    interface ens256 # 网卡</span><br><span class="line">    virtual_router_id 61</span><br><span class="line">    # 主节点权重最高 依次减少</span><br><span class="line">    priority 120</span><br><span class="line">    advert_int 1</span><br><span class="line">    #修改为本地IP </span><br><span class="line">    mcast_src_ip x.x.x.2</span><br><span class="line">    nopreempt</span><br><span class="line">    authentication &#123;</span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass sqP05dQgMSlzrxHj</span><br><span class="line">    &#125;</span><br><span class="line">    unicast_peer &#123;</span><br><span class="line">        x.x.x.1</span><br><span class="line">        #x.x.x.2</span><br><span class="line">        x.x.x.3</span><br><span class="line">    &#125;</span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        x.x.x.4</span><br><span class="line">    &#125;</span><br><span class="line">    track_script &#123;</span><br><span class="line">        CheckK8sMaster</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="kubernetes部署"><a href="#kubernetes部署" class="headerlink" title="kubernetes部署"></a>kubernetes部署</h2><h3 id="1、etcd二进制部署"><a href="#1、etcd二进制部署" class="headerlink" title="1、etcd二进制部署"></a>1、etcd二进制部署</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 1.cfssl签发证书</span></span><br><span class="line">wget https://pkg.cfssl.org/R1.2/cfssl_linux-amd64</span><br><span class="line">chmod +x cfssl_linux-amd64</span><br><span class="line">mv cfssl_linux-amd64 /usr/local/bin/cfssl</span><br><span class="line">wget https://pkg.cfssl.org/R1.2/cfssljson_linux-amd64</span><br><span class="line">chmod +x cfssljson_linux-amd64</span><br><span class="line">mv cfssljson_linux-amd64 /usr/local/bin/cfssljson</span><br><span class="line">wget https://pkg.cfssl.org/R1.2/cfssl-certinfo_linux-amd64</span><br><span class="line">chmod +x cfssl-certinfo_linux-amd64</span><br><span class="line">mv cfssl-certinfo_linux-amd64 /usr/local/bin/cfssl-certinfo</span><br><span class="line">export PATH=/usr/local/bin:$PATH</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 2.根据config.json文件的格式创建如下的ca-config.json文件,过期时间设置成了 87600h</span></span><br><span class="line">mkdir /root/ssl</span><br><span class="line">cd /root/ssl</span><br><span class="line">cfssl print-defaults config &gt; config.json</span><br><span class="line">cfssl print-defaults csr &gt; csr.json</span><br><span class="line"></span><br><span class="line">cat &gt; ca-config.json &lt;&lt;EOF</span><br><span class="line">&#123;</span><br><span class="line">  "signing": &#123;</span><br><span class="line">    "default": &#123;</span><br><span class="line">      "expiry": "87600h"</span><br><span class="line">    &#125;,</span><br><span class="line">    "profiles": &#123;</span><br><span class="line">      "kubernetes": &#123;</span><br><span class="line">        "usages": [</span><br><span class="line">            "signing",</span><br><span class="line">            "key encipherment",</span><br><span class="line">            "server auth",</span><br><span class="line">            "client auth"</span><br><span class="line">        ],</span><br><span class="line">        "expiry": "87600h"</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">cat &gt; ca-csr.json &lt;&lt;EOF</span><br><span class="line">&#123;</span><br><span class="line">  "CN": "kubernetes",</span><br><span class="line">  "key": &#123;</span><br><span class="line">    "algo": "rsa",</span><br><span class="line">    "size": 2048</span><br><span class="line">  &#125;,</span><br><span class="line">  "names": [</span><br><span class="line">    &#123;</span><br><span class="line">      "C": "CN",</span><br><span class="line">      "ST": "BeiJing",</span><br><span class="line">      "L": "BeiJing",</span><br><span class="line">      "O": "k8s",</span><br><span class="line">      "OU": "System"</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">cfssl gencert -initca ca-csr.json | cfssljson -bare ca</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 3.创建kubernetes-etcd证书</span></span><br><span class="line">cat &gt; kubernetes-etcd-csr.json &lt;&lt;EOF</span><br><span class="line">&#123;</span><br><span class="line">    "CN": "kubernetes",</span><br><span class="line">    "hosts": [</span><br><span class="line">      "x.x.x.1",</span><br><span class="line">      "x.x.x.2",</span><br><span class="line">      "x.x.x.3",</span><br><span class="line">      "x.x.x.4",</span><br><span class="line">      "127.0.0.1",</span><br><span class="line">      "10.254.0.1",</span><br><span class="line">      "kubernetes",</span><br><span class="line">      "kubernetes.default",</span><br><span class="line">      "kubernetes.default.svc",</span><br><span class="line">      "kubernetes.default.svc.cluster",</span><br><span class="line">      "kubernetes.default.svc.cluster.local"</span><br><span class="line">    ],</span><br><span class="line">    "key": &#123;</span><br><span class="line">        "algo": "rsa",</span><br><span class="line">        "size": 2048</span><br><span class="line">    &#125;,</span><br><span class="line">    "names": [</span><br><span class="line">        &#123;</span><br><span class="line">            "C": "CN",</span><br><span class="line">            "ST": "BeiJing",</span><br><span class="line">            "L": "BeiJing",</span><br><span class="line">            "O": "k8s",</span><br><span class="line">            "OU": "System"</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=kubernetes kubernetes-etcd-csr.json | cfssljson -bare etcd</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 4.目录证书文件如下</span></span><br><span class="line">etcd-key.pem etcd.pem ca.pem ca.key</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 保证三节点证书一致</span></span><br><span class="line">scp /etc/etcd/ssl/* master2:/etc/etcd/ssl/</span><br><span class="line">scp /etc/etcd/ssl/* master3:/etc/etcd/ssl/</span><br></pre></td></tr></table></figure><blockquote><p>证书生成完毕之后，将CA证书ca.pem, etcd秘钥etcd-key.pem, etcd证书etcd.pem拷贝到各节点的/etc/etcd/ssl目录中。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 这里就用etcd 3.3.10版本</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 一：</span></span><br><span class="line">wget https://github.com/coreos/etcd/releases/download/v3.3.10/etcd-v3.3.10-linux-amd64.tar.gz</span><br><span class="line"><span class="meta">#</span><span class="bash"> 解压缩etcd-v3.3.10-linux-amd64.tar.gz，将其中的etcd和etcdctl两个可执行文件复制到各节点的/usr/bin和/usr/<span class="built_in">local</span>/bin目录。</span></span><br><span class="line">tar zxvf etcd-v3.3.10-linux-amd64.tar.gz</span><br><span class="line">cp etcd-v3.3.10-linux-amd64/etcd* /usr/local/bin/</span><br><span class="line">cp etcd-v3.3.10-linux-amd64/etcd* /usr/bin/</span><br><span class="line">mkdir /var/lib/etcd     #etcd的数据目录</span><br><span class="line">mkdir /etc/etcd        #etcd的配置文件目录</span><br><span class="line"><span class="meta">#</span><span class="bash"> 二：</span></span><br><span class="line">yum -y install etcd</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装好etcd之后，就可以修改etcd配置以及启动service，文件路径为：/etc/etcd/etcd.conf和/usr/lib/systemd/system/etcd.service</span></span><br><span class="line">cat &gt; /etc/etcd/etcd.conf &lt;&lt; EOF</span><br><span class="line"><span class="meta">#</span><span class="bash"> [member]</span></span><br><span class="line">ETCD_NAME=etcd1 # etcd名字 三节点的话为 etcd1 etcd2 etcd3</span><br><span class="line">ETCD_DATA_DIR="/data/etcd" # etcd数据目录指定</span><br><span class="line">ETCD_LISTEN_PEER_URLS="https://x.x.x.1:2380" # 修改每个master节点的ip</span><br><span class="line">ETCD_LISTEN_CLIENT_URLS="https://x.x.x.1:2379"</span><br><span class="line"><span class="meta">#</span><span class="bash">[cluster]</span></span><br><span class="line">ETCD_INITIAL_ADVERTISE_PEER_URLS="https://x.x.x.1:2380"</span><br><span class="line">ETCD_INITIAL_CLUSTER_TOKEN="etcd-cluster"</span><br><span class="line">ETCD_ADVERTISE_CLIENT_URLS="https://x.x.x.1:2379"</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">cat &gt; /usr/lib/systemd/system/etcd.service &lt;&lt; EOF</span><br><span class="line">[Unit]</span><br><span class="line">Description=Etcd Server</span><br><span class="line">After=network.target</span><br><span class="line">After=network-online.target</span><br><span class="line">Wants=network-online.target</span><br><span class="line">Documentation=https://github.com/coreos</span><br><span class="line">[Service]</span><br><span class="line">Type=notify</span><br><span class="line">WorkingDirectory=/var/lib/etcd/</span><br><span class="line">EnvironmentFile=-/etc/etcd/etcd.conf</span><br><span class="line">ExecStart=/usr/local/bin/etcd \</span><br><span class="line">  --name $&#123;ETCD_NAME&#125; \</span><br><span class="line">  --cert-file=/etc/etcd/ssl/etcd.pem \</span><br><span class="line">  --key-file=/etc/etcd/ssl/etcd-key.pem \</span><br><span class="line">  --peer-cert-file=/etc/etcd/ssl/etcd.pem \</span><br><span class="line">  --peer-key-file=/etc/etcd/ssl/etcd-key.pem \</span><br><span class="line">  --trusted-ca-file=/etc/etcd/ssl/ca.pem \</span><br><span class="line">  --peer-trusted-ca-file=/etc/etcd/ssl/ca.pem \</span><br><span class="line">  --initial-advertise-peer-urls $&#123;ETCD_INITIAL_ADVERTISE_PEER_URLS&#125; \</span><br><span class="line">  --listen-peer-urls $&#123;ETCD_LISTEN_PEER_URLS&#125; \</span><br><span class="line">  --listen-client-urls $&#123;ETCD_LISTEN_CLIENT_URLS&#125;,http://127.0.0.1:2379 \</span><br><span class="line">  --advertise-client-urls $&#123;ETCD_ADVERTISE_CLIENT_URLS&#125; \</span><br><span class="line">  --initial-cluster-token $&#123;ETCD_INITIAL_CLUSTER_TOKEN&#125; \</span><br><span class="line">  --initial-cluster etcd1=https://x.x.x.1:2380,etcd2=https://x.x.x.2:2380,etcd3=https://x.x.x.3:2380 \</span><br><span class="line">  --initial-cluster-state new \</span><br><span class="line">  --data-dir=$&#123;ETCD_DATA_DIR&#125;</span><br><span class="line">Restart=on-failure</span><br><span class="line">RestartSec=5</span><br><span class="line">LimitNOFILE=65536</span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 上面在启动参数中指定了etcd的工作目录和数据目录分别是/var/lib/etcd和/data/etcd</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> –cert-file和–key-file分别指定etcd的公钥证书和私钥</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> –peer-cert-file和–peer-key-file分别指定了etcd的Peers通信的公钥证书和私钥。</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> –trusted-ca-file指定了客户端的CA证书</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> –peer-trusted-ca-file指定了Peers的CA证书</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> –initial-cluster-state new表示这是新初始化集群，–name指定的参数值必须在–initial-cluster中</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 高可用etcd启动需要多节点同时启动才能起来服务</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 分别在master节点同时启动etcd</span></span><br><span class="line">systemctl start etcd.service</span><br><span class="line">systemctl enable etcd.service</span><br></pre></td></tr></table></figure><blockquote><p>至此，etcd高可用集群搭建完成，可用一下命令验证etcd集群</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">etcdctl \</span><br><span class="line">  --ca-file=/etc/etcd/ssl/ca.pem \</span><br><span class="line">  --cert-file=/etc/etcd/ssl/etcd.pem \</span><br><span class="line">  --key-file=/etc/etcd/ssl/etcd-key.pem \</span><br><span class="line">  --endpoints=https://x.x.x.1:2379,https://x.x.x.2:2379,https://x.x.x.3:2379 \</span><br><span class="line">  cluster-health</span><br></pre></td></tr></table></figure><h3 id="2、kubeadm部署"><a href="#2、kubeadm部署" class="headerlink" title="2、kubeadm部署"></a>2、kubeadm部署</h3><h4 id="1、master部署"><a href="#1、master部署" class="headerlink" title="1、master部署"></a>1、master部署</h4><blockquote><p>部署之前请确保下载好相关image，翻墙下载或者国内dockerhub下载kubernetes镜像</p></blockquote><h5 id="1、初始化master1"><a href="#1、初始化master1" class="headerlink" title="1、初始化master1"></a>1、初始化master1</h5><blockquote><p>创建master1的初始化配置文件,网络插件采用flannel，CIDR地址是 “10.244.0.0/16”，如下为1.13.5新版本配置文件。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">cat &gt; kubeadm-master.yaml &lt;&lt; EOF</span><br><span class="line">apiVersion: kubeadm.k8s.io/v1beta1</span><br><span class="line">kind: InitConfiguration</span><br><span class="line">localAPIEndpoint:</span><br><span class="line">  advertiseAddress: x.x.x.1  # 本机ip，这里为x.x.x.1-3</span><br><span class="line">  bindPort: 6443</span><br><span class="line">---</span><br><span class="line">apiVersion: kubeadm.k8s.io/v1beta1</span><br><span class="line">kind: ClusterConfiguration</span><br><span class="line">kubernetesVersion: v1.13.5   # kubernetes版本 对应下载的image</span><br><span class="line">imageRepository: k8s.gcr.io  # 自己修改为自己的镜像库名</span><br><span class="line"></span><br><span class="line">apiServer:</span><br><span class="line">  certSANs:</span><br><span class="line">  - "master1"</span><br><span class="line">  - "master2"</span><br><span class="line">  - "master3"</span><br><span class="line">  - "x.x.x.1"</span><br><span class="line">  - "x.x.x.2"</span><br><span class="line">  - "x.x.x.3"</span><br><span class="line">  - "x.x.x.4"</span><br><span class="line">  - "127.0.0.1"</span><br><span class="line"></span><br><span class="line">controlPlaneEndpoint: "x.x.x.4:8443" # 控制台ip指定，即vip 实现apiserver高可用</span><br><span class="line">etcd:</span><br><span class="line">  external:</span><br><span class="line">     endpoints:</span><br><span class="line">     - https://x.x.x.1:2379</span><br><span class="line">     - https://x.x.x.2:2379</span><br><span class="line">     - https://x.x.x.3:2379</span><br><span class="line">networking:</span><br><span class="line">  podSubnet: "10.244.0.0/16"</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 运行初始化命令即可，前提要把相关设置关闭，详情至准备工作</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 其中在kubelet配置里加入--pod-infra-container-image 参数指定 pause私有镜像库镜像</span></span><br><span class="line">kubeadm init --config kubeadm-master.yaml</span><br></pre></td></tr></table></figure><blockquote><p>在初始化配置里，对于etcd有两种高可用的选项，一个使用内部etcd，一个使用外部etcd(独立搭建的etcd集群，而不是在初始化中搭建的)，两者初始化配置文件略有不同。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 使用内部etcd的话，初始化yaml文件中etcd配置如下：</span></span><br><span class="line">etcd:</span><br><span class="line">  local:</span><br><span class="line">    extraArgs:</span><br><span class="line">      listen-client-urls: "https://127.0.0.1:2379,https://x.x.x.x:2379"</span><br><span class="line">      advertise-client-urls: "https://x.x.x.x:2379"</span><br><span class="line">      listen-peer-urls: "https://x.x.x.x:2380"</span><br><span class="line">      initial-advertise-peer-urls: "https://x.x.x.x:2380"</span><br><span class="line">      initial-cluster: "master1.hanli.com=https://x.x.x.x:2380"</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 使用外部etcd的话，</span></span><br><span class="line">etcd:    #ETCD的地址</span><br><span class="line">   external:</span><br><span class="line">     endpoints:</span><br><span class="line">     - https://x.x.x.1:2379</span><br><span class="line">     - https://x.x.x.2:2379</span><br><span class="line">     - https://x.x.x.3:2379</span><br></pre></td></tr></table></figure><blockquote><p>init初始化之后，如果成功会出现<code>join</code>，这时就可以运行一下命令</p><p>机器上的用户要使用<code>kubectl</code>来管理集群操作集群</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p $HOME/.kube</span><br><span class="line">sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config</span><br><span class="line">sudo chown $(id -u):$(id -g) $HOME/.kube/config</span><br></pre></td></tr></table></figure><blockquote><p>验证命令</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">kubectl get cs # 如下信息</span><br><span class="line">NAME                 STATUS    MESSAGE              ERROR</span><br><span class="line">controller-manager   Healthy   ok</span><br><span class="line">scheduler            Healthy   ok</span><br><span class="line">etcd-1               Healthy   &#123;"health": "true"&#125;</span><br><span class="line">etcd-0               Healthy   &#123;"health": "true"&#125;</span><br><span class="line">etcd-2               Healthy   &#123;"health": "true"&#125;</span><br><span class="line"></span><br><span class="line">kubectl get node # notReady 状态，是因为没有安装网络插件 Name成ip，可修改kubelet的启动参数即可</span><br><span class="line">NAME         STATUS       ROLES     AGE     VERSION</span><br><span class="line">master1     NotReady      master     1m      v1.13.5</span><br></pre></td></tr></table></figure><h5 id="2、启动flannel服务"><a href="#2、启动flannel服务" class="headerlink" title="2、启动flannel服务"></a>2、启动flannel服务</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">wget https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml</span><br><span class="line"><span class="meta">#</span><span class="bash"> flannel 默认会使用主机的第一张网卡，如果你有多张网卡，需要通过配置单独指定。修改 kube-flannel.yml 中的以下部分</span></span><br><span class="line">cat kube-flannel.yml </span><br><span class="line"> containers:</span><br><span class="line">      - name: kube-flannel</span><br><span class="line">        image: quay.io/coreos/flannel:v0.11.0-amd64 # 修改下自己私有镜像库的flannel镜像名</span><br><span class="line">        command:</span><br><span class="line">        - /opt/bin/flanneld</span><br><span class="line">        args:</span><br><span class="line">        - --ip-masq</span><br><span class="line">        - --kube-subnet-mgr</span><br><span class="line">        - --iface=ens33              #添加</span><br></pre></td></tr></table></figure><hr><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">kubectl apply -f kube-flannel.yml # 创建pod，因为是ds的所以后续集群里面加节点就会自动启动flannel</span><br><span class="line">kubectl get node # 会发现 node状态变成了 Ready</span><br><span class="line">NAME         STATUS       ROLES     AGE     VERSION</span><br><span class="line">master1       Ready      master     10m      v1.13.5</span><br><span class="line"></span><br><span class="line">kubectl get po --all-namespaces</span><br><span class="line">NAMESPACE     NAME                                       READY   STATUS    RESTARTS   AGE</span><br><span class="line">kube-system   coredns-86c58d9df4-r59rv                   1/1     Running   0          59m</span><br><span class="line">kube-system   coredns-86c58d9df4-rbzx5                   1/1     Running   0          59m</span><br><span class="line">kube-system   kube-apiserver-master1                     1/1     Running   0          58m</span><br><span class="line">kube-system   kube-controller-manager-master1            1/1     Running   16         58m</span><br><span class="line">kube-system   kube-flannel-ds-amd64-229j2                1/1     Running   0          42m</span><br><span class="line">kube-system   kube-proxy-4wrg5                           1/1     Running   0          59m</span><br><span class="line">kube-system   kube-scheduler-master1                     1/1     Running   13         58m</span><br></pre></td></tr></table></figure><blockquote><p>不是running状态，就说明出错了，通过查看</p><p>描述：kubectl describe pod kube-scheduler-master.hanli.com -n kube-system</p><p>日志：kubectl logs kube-scheduler-master.hanli.com -n kube-system</p><p>flannel服务启动成功后，coredns也就会自动启动成功，状态为Running</p></blockquote><h5 id="3、初始化其他master节点"><a href="#3、初始化其他master节点" class="headerlink" title="3、初始化其他master节点"></a>3、初始化其他master节点</h5><blockquote><p>首先把master1上生成的ca证书等，拷贝到其他master节点上，最好免密，可使用pscp等批量任务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> <span class="comment">#!/bin/bash</span></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> <span class="comment">#注意修改为自己的主机名</span></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> <span class="built_in">export</span> CONTROL_PLANE_IPS=<span class="string">"master2 master3"</span>  </span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> </span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> <span class="comment"># 保证节点有/etc/kubernetes/pki目录</span></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> <span class="comment"># 把以下证书复制到其他master节点</span></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> <span class="keyword">for</span> host <span class="keyword">in</span> <span class="variable">$&#123;CONTROL_PLANE_IPS&#125;</span>; <span class="keyword">do</span></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">   scp /etc/kubernetes/pki/*.crt <span class="variable">$host</span>:/etc/kubernetes/pki/</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">   scp /etc/kubernetes/pki/*.key <span class="variable">$host</span>:/etc/kubernetes/pki/</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">   scp /etc/kubernetes/pki/*.pub <span class="variable">$host</span>:/etc/kubernetes/pki/</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">   scp /etc/kubernetes/admin.conf <span class="variable">$host</span>:/etc/kubernetes/admin.conf</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> <span class="keyword">done</span></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"></span></span><br></pre></td></tr></table></figure></blockquote><blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> tree /etc/kubernetes/pki/</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> /etc/kubernetes/pki/</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> ├── apiserver.crt</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> ├── apiserver-etcd-client.crt</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> ├── apiserver-etcd-client.key</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> ├── apiserver.key</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> ├── apiserver-kubelet-client.crt</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> ├── apiserver-kubelet-client.key</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> ├── ca.crt</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> ├── ca.key</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> ├── front-proxy-ca.crt</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> ├── front-proxy-ca.key</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> ├── front-proxy-client.crt</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> ├── front-proxy-client.key</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> ├── sa.key</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> └── sa.pub</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"></span></span><br></pre></td></tr></table></figure></blockquote><blockquote><p>In v1.8.0, kubeadm introduced the <code>kubeadm alpha phase</code> command with the aim of making kubeadm more modular. In v1.13.0 this command graduated to <code>kubeadm init phase</code>. This modularity enables you to invoke atomic sub-steps of the bootstrap process. Hence, you can let kubeadm do some parts and fill in yourself where you need customizations.</p><p><code>kubeadm init phase</code> is consistent with the <a href="https://kubernetes.io/docs/reference/setup-tools/kubeadm/kubeadm-init/#init-workflow" target="_blank" rel="noopener">kubeadm init workflow</a>, and behind the scene both use the same code.</p><p>在v1.8.0中，kubeadm引入了该<code>kubeadm alpha phase</code>命令，目的是使kubeadm更加模块化。在v1.13.0中，此命令逐渐变为<code>kubeadm init phase</code>。此模块化使您可以调用引导过程的原子子步骤。因此，您可以让kubeadm执行某些操作，并在需要自定义的位置填写您自己的位置。</p><p><code>kubeadm init phase</code>与<a href="https://kubernetes.io/docs/reference/setup-tools/kubeadm/kubeadm-init/#init-workflow" target="_blank" rel="noopener">kubeadm init工作流程</a>一致，并且在场景后面都使用相同的代码。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">kubectl init --config kube-master.yaml</span><br><span class="line"><span class="meta">#</span><span class="bash"> 分别修改对应ip，在在master2-3并执行即可 步骤如master1</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 等待kube-proxy flannel启动成功即可</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">kubectl get po -n kube-system</span><br><span class="line">NAME                                  READY     STATUS    RESTARTS   AGE</span><br><span class="line">coredns-9f9d9c76-4zrt4                  1/1     Running   0          2d</span><br><span class="line">coredns-9f9d9c76-dqd4c                  1/1     Running   0          2d</span><br><span class="line">kube-apiserver-zjjh-rq-k8s-1            1/1     Running   0          2d</span><br><span class="line">kube-apiserver-zjjh-rq-k8s-2            1/1     Running   0          2d</span><br><span class="line">kube-apiserver-zjjh-rq-k8s-3            1/1     Running   0          2d</span><br><span class="line">kube-controller-manager-zjjh-rq-k8s-1   1/1     Running   0          2d</span><br><span class="line">kube-controller-manager-zjjh-rq-k8s-2   1/1     Running   0          2d</span><br><span class="line">kube-controller-manager-zjjh-rq-k8s-3   1/1     Running   0          2d</span><br><span class="line">kube-flannel-ds-amd64-7ghn7             1/1     Running   1          2d</span><br><span class="line">kube-flannel-ds-amd64-9cqts             1/1     Running   0          2d</span><br><span class="line">kube-flannel-ds-amd64-f57nh             1/1     Running   1          2d</span><br><span class="line">kube-proxy-8fwts                        1/1     Running   0          2d</span><br><span class="line">kube-proxy-95tjb                        1/1     Running   0          2d</span><br><span class="line">kube-proxy-bls94                        1/1     Running   0          2d</span><br><span class="line">kube-scheduler-zjjh-rq-k8s-1            1/1     Running   0          2d</span><br><span class="line">kube-scheduler-zjjh-rq-k8s-2            1/1     Running   0          2d</span><br><span class="line">kube-scheduler-zjjh-rq-k8s-3            1/1     Running   0          2d</span><br><span class="line">kubernetes-dashboard-67d49f7868-x79wf   1/1     Running   0          76m</span><br></pre></td></tr></table></figure><h4 id="2、Work节点加入集群"><a href="#2、Work节点加入集群" class="headerlink" title="2、Work节点加入集群"></a>2、Work节点加入集群</h4><blockquote><p>输入master节点初始化成功之后出现的<code>join</code>命令，出现<code>kubectl get nodes</code>即成功</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> kubeadm join x.x.x.4:8443 --token bnnsb7.amapp1t78llxn54d --discovery-token-ca-cert-hash sha256:520ef89be84c30e480db6d441a7e4179634a9455f0009e249ebe8f35fa792087</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"></span></span><br></pre></td></tr></table></figure></blockquote><h4 id="3、集群验证"><a href="#3、集群验证" class="headerlink" title="3、集群验证"></a>3、集群验证</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 节点状态</span></span><br><span class="line">[root@master] ~$ kubectl get nodes</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 组件状态</span></span><br><span class="line">[root@master] ~$  kubectl get cs</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 服务账户</span></span><br><span class="line">[root@master] ~$ kubectl get serviceaccount</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 集群信息</span></span><br><span class="line">[root@master] ~$ kubectl cluster-info</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 验证dns功能</span></span><br><span class="line">[root@master] ~$ kubectl run curl --image=radial/busyboxplus:curl -it</span><br><span class="line">[ root@curl-66959f6557-r4crd:/ ]$ nslookup kubernetes.default</span><br><span class="line">Server:    10.96.0.10</span><br><span class="line">Address 1: 10.96.0.10 kube-dns.kube-system.svc.cluster.local</span><br><span class="line"></span><br><span class="line">Name:      kubernetes.default</span><br><span class="line">Address 1: 10.96.0.1 kubernetes.default.svc.cluster.local</span><br></pre></td></tr></table></figure><blockquote><p>附录：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"><span class="comment"># kubelet.service配置文件 /use/lib/systemd/system/kubelet.service.d/10-kubeadm.conf</span></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"></span></span><br></pre></td></tr></table></figure></blockquote><hr><p>参考链接：</p><p>kubeadm安装1.13.5：<a href="https://blog.csdn.net/fanren224/article/details/86573264#2master1_165" target="_blank" rel="noopener">https://blog.csdn.net/fanren224/article/details/86573264#2master1_165</a></p><p>二进制安装：<a href="https://github.com/mritd/ktool" target="_blank" rel="noopener">https://github.com/mritd/ktool</a></p><p>二进制安装kubernetes_v1.13.4：<a href="https://mritd.me/2019/03/16/set-up-kubernetes-1.13.4-cluster/" target="_blank" rel="noopener">https://mritd.me/2019/03/16/set-up-kubernetes-1.13.4-cluster/</a></p>]]></content>
      
      
      <categories>
          
          <category> Kubernetes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kubernetes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Golang并发之sync.WaitGroup</title>
      <link href="/sheldon_blog/passages/Golang%E5%B9%B6%E5%8F%91%E4%B9%8Bsync-WaitGroup/"/>
      <url>/sheldon_blog/passages/Golang%E5%B9%B6%E5%8F%91%E4%B9%8Bsync-WaitGroup/</url>
      
        <content type="html"><![CDATA[<h2 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> wg sync.WaitGroup</span><br></pre></td></tr></table></figure><h2 id="sync-WaitGroup-Golang内置sync包"><a href="#sync-WaitGroup-Golang内置sync包" class="headerlink" title="sync.WaitGroup/ Golang内置sync包"></a>sync.WaitGroup/ Golang内置sync包<a id="more"></a></h2><blockquote><p>Wg变量：该类型有三个指针方法，即Add、Done和Wait。</p><p>类型sync.WaitGroup是一个结构体类型。当一个sync.WaitGroup类型的变量被声明之后，其值中的那个计数值将会是0。 </p><p>我们可以通过该值的Add方法增大或减少其中的计数值。 如下：</p><p>wg.Add(1) </p><p>与wg.Add(-1)的执行效果是一致的： </p><p>wg.Done() </p><p>总结:</p><p>1、使用Done方法禁忌与Add方法的一样——不要让相应的计数值变为负数。 </p><p>例如，这段代码中的第5条语句会引发一个运行时恐慌： </p><p>var wg sync.WaitGroup </p><p>wg.Add(2) </p><p>wg.Done() </p><p>wg.Done() </p><p>wg.Done() </p><p>2、当我们调用sync.WaitGroup类型值的Wait方法的时候，它会去检查该值中的计数值。如果这个计数值为0，那么该方法会立即返回，且不会对程序的运行产生任何影响。 但是，如果这个计数值大于0，那么该方法的调用方所属的那个Goroutine就会被阻塞。直到该计数值重新变为0之时，为此而被阻塞的所有Goroutine才会被唤醒。 </p></blockquote><h2 id="代码案例"><a href="#代码案例" class="headerlink" title="代码案例"></a>代码案例</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 协调多个Goroutine的运行。假设，在我们的程序中启用了4个Goroutine，分别是G1、G2、G3和G4。其中，G2、G3和G4是由G1中的代码启用并被用于执行某些特定任务的。G1在启用这3个Goroutine之后要等待这些特定任务的完成。</span></span><br><span class="line"><span class="comment">// 方案1（channel通道）</span></span><br><span class="line">sign := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">byte</span>, <span class="number">3</span>)</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">//G2</span></span><br><span class="line">    sign &lt;- <span class="number">2</span></span><br><span class="line">&#125;()</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">//G3</span></span><br><span class="line">    sign &lt;- <span class="number">3</span></span><br><span class="line">&#125;()</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">//G4</span></span><br><span class="line">    sign &lt;- <span class="number">4</span></span><br><span class="line">&#125;()</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">3</span>; i++ &#123;</span><br><span class="line">fmt.Printf(<span class="string">"G%d is ended.\n"</span>, &lt;-sign)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 方案2（sync.WaitGroup）</span></span><br><span class="line"><span class="keyword">var</span> wg sync.WaitGroup</span><br><span class="line">wg.Add(<span class="number">3</span>)</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">//G2</span></span><br><span class="line">    wg.Done()</span><br><span class="line">&#125;()</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">//G3</span></span><br><span class="line">    wg.Done()</span><br><span class="line">&#125;()</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">//G4</span></span><br><span class="line">    wg.Done()</span><br><span class="line">&#125;()</span><br><span class="line">wg.Wait()</span><br><span class="line">fmt.Println(<span class="string">"Finish"</span>)</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">     <span class="string">"fmt"</span></span><br><span class="line">     <span class="string">"sync"</span></span><br><span class="line">     <span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">     <span class="keyword">var</span> wg sync.WaitGroup</span><br><span class="line">     <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">5</span>; i = i + <span class="number">1</span> &#123;</span><br><span class="line">          wg.Add(<span class="number">1</span>)</span><br><span class="line">          <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(n <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">               <span class="comment">// defer wg.Done()</span></span><br><span class="line">               <span class="keyword">defer</span> wg.Add(<span class="number">-1</span>)</span><br><span class="line">               EchoNumber(n)</span><br><span class="line">          &#125;(i) <span class="comment">// n = i</span></span><br><span class="line">     &#125;</span><br><span class="line">     wg.Wait()</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">EchoNumber</span><span class="params">(i <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">     time.Sleep(<span class="number">3e9</span>)</span><br><span class="line">     fmt.Println(i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Golang并发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Golang并发之原子操作</title>
      <link href="/sheldon_blog/passages/Golang%E5%B9%B6%E5%8F%91%E4%B9%8B%E5%8E%9F%E5%AD%90%E6%93%8D%E4%BD%9C/"/>
      <url>/sheldon_blog/passages/Golang%E5%B9%B6%E5%8F%91%E4%B9%8B%E5%8E%9F%E5%AD%90%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h2 id="1、"><a href="#1、" class="headerlink" title="1、"></a>1、</h2>]]></content>
      
      
      <categories>
          
          <category> Golang并发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo入坑-主题篇</title>
      <link href="/sheldon_blog/passages/Hexo%E5%85%A5%E5%9D%91-%E4%B8%BB%E9%A2%98%E7%AF%87/"/>
      <url>/sheldon_blog/passages/Hexo%E5%85%A5%E5%9D%91-%E4%B8%BB%E9%A2%98%E7%AF%87/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo入坑-安装篇</title>
      <link href="/sheldon_blog/passages/Hexo%E5%85%A5%E5%9D%91-%E5%AE%89%E8%A3%85%E7%AF%87/"/>
      <url>/sheldon_blog/passages/Hexo%E5%85%A5%E5%9D%91-%E5%AE%89%E8%A3%85%E7%AF%87/</url>
      
        <content type="html"><![CDATA[<h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><ul><li><font size="3">有一个github账号，没有的话去注册一个</font></li><li><font size="3">安装了git、node.js、npm，并了解相关基础知识</font><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br><span class="line">git --version</span><br></pre></td></tr></table></figure></li><li><p><font size="3">安装了git for Mac（或者其它git客户端）</font><a id="more"></a></p></li></ul><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="1-创建github仓库"><a href="#1-创建github仓库" class="headerlink" title="1. 创建github仓库"></a>1. 创建github仓库</h3><p>​    github上新建一个名为<code>用户名.github.io</code>的项目，例如：sheldon-lu.github.io，</p><p>这个项目名是用来做域名用的，当然也可以去申请一个属于自己的域名，一般推荐<a href="https://www.GoDaddy.com/" target="_blank" rel="noopener"><code>godaddy</code></a></p><h3 id="2-配置SSH-key免密上传"><a href="#2-配置SSH-key免密上传" class="headerlink" title="2. 配置SSH key免密上传"></a>2. 配置SSH key免密上传</h3><p>不详细讲了，命令如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">cd ~/.ssh</span><br><span class="line"><span class="meta">#</span> 检查本机已存在的ssh密钥</span><br><span class="line"><span class="meta">#</span> 如果提示：No such file or directory 说明你是第一次使用git。</span><br><span class="line">ssh-keygen -t rsa -C "邮件地址"</span><br><span class="line"><span class="meta">#</span> 然后连续3次回车，最终会生成一个文件在用户目录下，打开用户目录，找到.ssh\id_rsa.pub文件，记事本打开并复制里面的内容，打开你的github主页，进入个人设置 -&gt; SSH and GPG keys -&gt; New SSH key</span><br><span class="line"><span class="meta">#</span> 测试是否成功，验证命令：</span><br><span class="line">ssh -T git@GitHub.com</span><br><span class="line"><span class="meta">#</span># Hi cnfeat! You've successfully authenticated, but GitHub does not provide shell access.出现这个就是成功了，之后可以测试一下push是否免密上传。</span><br><span class="line"><span class="meta">#</span> 此时你可能还需要配置，这个属于全局config，对于git项目完全可以git clone下来之后进行push等等操作：</span><br><span class="line">git config --global user.name "liuxianan"// 你的github用户名，非昵称</span><br><span class="line">git config --global user.email  "xxx@qq.com"// 填写你的github注册邮箱</span><br></pre></td></tr></table></figure><h3 id="3-Hexo安装及介绍"><a href="#3-Hexo安装及介绍" class="headerlink" title="3. Hexo安装及介绍"></a>3. Hexo安装及介绍</h3><p>官网： <a href="http://hexo.io" target="_blank" rel="noopener">http://hexo.io</a> </p><p>github: <a href="https://github.com/hexojs/hexo" target="_blank" rel="noopener">https://github.com/hexojs/hexo</a> </p><p>由于github pages存放的都是静态文件，博客存放的不只是文章内容，还有文章列表、分类、标签、翻页等动态内容，假如每次写完一篇文章都要手动更新博文目录和相关链接信息，相信谁都会疯掉，所以hexo所做的就是将这些md文件都放在本地，每次写完文章后调用写好的命令来批量完成相关页面的生成，然后再将有改动的页面提交到github。 </p><p>安装之前先来说几个注意事项： </p><ol><li><p>很多命令既可以用Windows的cmd来完成，也可以使用git bash来完成，但是部分命令会有一些问题，为避免不必要的问题，建议全部使用git bash来执行（对于windows用户而言）； </p></li><li><p>hexo不同版本差别比较大，网上很多文章的配置信息都是基于2.x的，所以注意不要被误导； </p></li><li><p>hexo有2种_config.yml文件，一个是根目录下的全局的_config.yml，一个是各个theme下的； </p></li></ol><p>这里给官网上的部署命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">mkdir &lt;Your blog&gt; # 创建blog文档文件夹</span><br><span class="line">npm install hexo-cli -g # 安装hexo以及hexo命令</span><br><span class="line"><span class="meta">#</span> 初始化一个blog项目，其中'blog'为你的blog名字，hexo会自动下载一些文件到这个目录，包括node_modules.</span><br><span class="line">hexo init blog</span><br><span class="line">cd blog</span><br><span class="line">npm install</span><br><span class="line">hexo server</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span># 这两个命令是经常会用到的</span><br><span class="line">hexo s -g #生成并本地预览</span><br><span class="line">hexo d -g #生成并上传</span><br></pre></td></tr></table></figure><p>对于mac用户，如果遇到以下报错：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">安装npm install hexo-cli -g时报错</span><br><span class="line">npm install hexo -g</span><br><span class="line">npm WARN locking Error: EACCES, open &apos;/Users/lushenneng/.npm/_locks/hexo-4ded2cf5ea4a8daa.lock&apos;</span><br><span class="line">npm WARN locking at Error (native)</span><br><span class="line">npm WARN locking /Users/lushenneng/.npm/_locks/hexo-4ded2cf5ea4a8daa.lock failed &#123; [Error: EACCES, open &apos;/Users/lushenneng/.npm/_locks/hexo-4ded2cf5ea4a8daa.lock&apos;]</span><br><span class="line">npm WARN locking errno: -13,</span><br><span class="line">npm WARN locking code: &apos;EACCES&apos;,</span><br><span class="line">npm WARN locking path: &apos;/Users/lushenneng/.npm/_locks/hexo-4ded2cf5ea4a8daa.lock&apos; &#125;</span><br><span class="line">npm ERR! Darwin 14.0.0</span><br><span class="line">npm ERR! argv &quot;node&quot; &quot;/usr/bin/npm&quot; &quot;install&quot; &quot;hexo&quot; &quot;-g&quot;</span><br><span class="line">npm ERR! node v0.12.3</span><br><span class="line">npm ERR! npm v2.9.1</span><br><span class="line">npm ERR! Attempt to unlock /usr/lib/node_modules/hexo, which hasn&apos;t been locked</span><br><span class="line">npm ERR!</span><br><span class="line">npm ERR! If you need help, you may report this error at:</span><br><span class="line">npm ERR! https://github.com/npm/npm/issues</span><br><span class="line">npm ERR! Please include the following file with any support request:</span><br><span class="line">npm ERR! /Users/lushenneng/blog/npm-debug.log</span><br></pre></td></tr></table></figure><p>解决：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 可以先用这个命令：</span><br><span class="line">sudo npm install hexo-cli -g</span><br><span class="line"><span class="meta">#</span> 如果还是报错可以用这个命令：</span><br><span class="line">sudo npm install --unsafe-perm --verbose -g hexo</span><br><span class="line"><span class="meta">#</span> 加上sudo一般能解决很多问题</span><br></pre></td></tr></table></figure><h3 id="4-START-Hexo"><a href="#4-START-Hexo" class="headerlink" title="4. START Hexo"></a>4. START Hexo</h3><p>在blog目录下的_config.yml配置修改如下：(大概是在最后一行)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository:</span><br><span class="line">    github: git@github.com:sheldon-lu/sheldon_blog.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p>我这里不指定用的github.io这个域名是因为我用sheldon-lu.github.io作主域名，sheldon_blog作文根，当然这样的话这边hexo内设置如下：(大概在14行左右开始)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># URL</span><br><span class="line">## If your site is put in a subdirectory, set url as &apos;http://yoursite.com/child&apos; and root as &apos;/child/&apos;</span><br><span class="line">url: https://sheldon-lu.github.io/</span><br><span class="line">root: /sheldon_blog</span><br><span class="line"># permalink: :year/:month/:day/:title/</span><br><span class="line">permalink: passages/:title/</span><br><span class="line">permalink_defaults:</span><br></pre></td></tr></table></figure><p>至此，就可以使用了，浏览器输入域名：<a href="https://sheldon-lu.github.io/sheldon_blog即可">https://sheldon-lu.github.io/sheldon_blog即可</a></p><hr><p><code>1、这里要说明一下，使用 hexo d 上传至github时如果需要用到 gh-pages 的话，记得在自己github的blog项目下创建个gh-pages的分支，即可;</code></p><p><code>2、_config.yml中配置repository时一定配置的要是ssh，别弄的什么https://github之类的</code></p><p>参考地址：<a href="https://ngwind.github.io/2018/07/27/%E4%BD%BF%E7%94%A8gh-pages+Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E7%BD%91%E9%A1%B5%E6%95%99%E7%A8%8B/" target="_blank" rel="noopener">https://ngwind.github.io/2018/07/27/%E4%BD%BF%E7%94%A8gh-pages+Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E7%BD%91%E9%A1%B5%E6%95%99%E7%A8%8B/</a></p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/sheldon_blog/passages/hello-world/"/>
      <url>/sheldon_blog/passages/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post<a id="more"></a></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
